<?xml version="1.0" encoding="UTF-8"?>  
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="com.spark_web.dao.ResvMapper">
		
	<select id="FindMaximumResvid" resultType="Integer">
		select 
			max(resv_id)	
		from
			t_resv
	</select>
	
	<insert id="InsertResv" parameterType="com.spark_web.domain.Resv">
		insert into t_resv (
			parkingslot_seq,
			resv_phonenum,
			resv_creditnum,
			resv_starttime,
			resv_authenticationnum,
			resv_cancel
		) values (
			#{parkingslot_seq},
			#{resv_phonenum},
			#{resv_creditnum},
			#{resv_starttime},
			#{resv_authenticationnum},
			"resv"
		);
	</insert>

	<select id="FindResv" resultType="com.spark_web.domain.Result_Resv_Info">
		select 
			B.parkingslot_id,
			B.parkingfacility_id,
			B.parkingslot_floor,
			B.parkingslot_zone,
			A.resv_starttime,
			A.resv_authenticationnum		
		from
			t_resv as A
		join
			t_parkingslot as B
		on
			A.parkingslot_seq = B.parkingslot_seq
		where
			A.resv_phonenum = #{resv_phonenum}
		and
			(A.resv_cancel = "resv" OR	A.resv_cancel = "parking")
	</select>

	<update id="UpdateCancelResv" parameterType="String">
		update 
			t_resv as A 
		join
			t_parkingslot as B
		on
			A.parkingslot_seq = B.parkingslot_seq
		set
			A.resv_cancel="cancel",
			B.parkingslot_state = 0
		where 
			A.resv_authenticationnum = #{resv_authenticationnum}
		and
			A.resv_cancel = "resv"
	</update>
	
	<select id="FindResvAuthenticationInfo" parameterType="String" resultType="com.spark_web.domain.Result_Resv_Info">
		select 
			B.parkingslot_id,
			B.parkingfacility_id,
			B.parkingslot_floor,
			B.parkingslot_zone,
			A.resv_authenticationnum		
		from
			t_resv as A
		join
			t_parkingslot as B
		on
			A.parkingslot_seq = B.parkingslot_seq
		where
			A.resv_authenticationnum = #{resv_authenticationnum}
		and
			A.resv_cancel = "resv"
	</select>
	
	
	<select id="FindResvAuthenticationNum" parameterType="Integer" resultType="String">
		select 
			resv_authenticationnum		
		from
			t_resv
		where
			parkingslot_seq = #{parkingslot_seq}
		and
			resv_cancel = "resv"
	</select>
	
	<update id="UpdateParkingSlotSeq" parameterType="com.spark_web.domain.Resv">
		update 
			t_resv
		set
			parkingslot_seq= #{parkingslot_seq}
		where 
			resv_authenticationnum = #{resv_authenticationnum}
		and
			resv_cancel = "resv"
	</update>
	
	<update id="UpdateParkingStartTime" parameterType="com.spark_web.domain.Resv">
		update 
			t_resv
		set
			parkingslot_seq= #{parkingslot_seq},
			parking_starttime = #{parking_starttime},	
			resv_cancel = #{resv_cancel}
		where 
			resv_authenticationnum = #{resv_authenticationnum}
		and
			resv_cancel = "resv"
	</update>
	
	<update id="UpdateParkingStatetoMoving" parameterType="com.spark_web.domain.Resv">
		update 
			t_resv
		set
			resv_cancel = #{resv_cancel}
		where
			parkingslot_seq= #{parkingslot_seq}
		and
			resv_cancel = "parking"
	</update>
	
	<update id="UpdateParkingExitTime" parameterType="com.spark_web.domain.Resv">
		update 
			t_resv
		set
			parking_exittime = #{parking_exittime},	
			resv_cancel ="terminate",
			parking_price = #{parking_price}
		where 
			parkingslot_seq = #{parkingslot_seq}
		and
			resv_cancel = #{resv_cancel}
	</update>
	
	<select id="FindParkingSlotStateMoving" parameterType="String" resultType="com.spark_web.domain.Resv">
		select 
			parkingslot_seq,
			resv_authenticationnum,
			parking_starttime 	
		from
			t_resv
		where
			resv_cancel = #{resv_cancel}
	</select>	
	
	<select id="FindStaricalParkingPeakTimeHour" parameterType="com.spark_web.domain.ParkingStaticalData" resultType="Integer">
		select 
			SUM((YEAR(A.parking_exittime)-YEAR(A.parking_starttime))*365*24 +
			(MONTH(A.parking_exittime)-MONTH(A.parking_starttime))*31*24 +
			(DAY(A.parking_exittime)-DAY(A.parking_starttime))*24 +
			HOUR(A.parking_exittime)-HOUR(A.parking_starttime) +
			Ceil((MINUTE(A.parking_exittime)-MINUTE(A.parking_starttime))/60))		 	
		from
			t_resv as A
		join
			t_parkingslot as B
		on
			A.parkingslot_seq = B.parkingslot_seq
		where
			B.parkingfacility_id = #{parkingfacility_id}
		and
			YEAR(A.parking_starttime) <![CDATA[<=]]> #{year}
		and
			YEAR(A.parking_exittime) <![CDATA[>=]]> #{year}
		and
			MONTH(A.parking_starttime) <![CDATA[<=]]> #{month}	
		and
			MONTH(A.parking_exittime) <![CDATA[>=]]> #{month}	
		and
			DAY(A.parking_starttime) <![CDATA[<=]]> #{day}
		and
			DAY(A.parking_exittime) <![CDATA[>=]]> #{day}
		and
			HOUR(A.parking_starttime) <![CDATA[<=]]> #{hour}
		and
			HOUR(A.parking_exittime) <![CDATA[>=]]> #{hour}
	</select>
	
	<select id="FindStaricalParkingPeakTimeDay" parameterType="com.spark_web.domain.ParkingStaticalData" resultType="Integer">
		select 
			SUM((YEAR(A.parking_exittime)-YEAR(A.parking_starttime))*365*24 +
			(MONTH(A.parking_exittime)-MONTH(A.parking_starttime))*31*24 +
			(DAY(A.parking_exittime)-DAY(A.parking_starttime))*24 +
			HOUR(A.parking_exittime)-HOUR(A.parking_starttime) +
			Ceil((MINUTE(A.parking_exittime)-MINUTE(A.parking_starttime))/60))	 	
		from
			t_resv as A
		join
			t_parkingslot as B
		on
			A.parkingslot_seq = B.parkingslot_seq
		where
			B.parkingfacility_id = #{parkingfacility_id}
		and
			YEAR(A.parking_starttime) <![CDATA[<=]]> #{year}
		and
			YEAR(A.parking_exittime) <![CDATA[>=]]> #{year}
		and
			MONTH(A.parking_starttime) <![CDATA[<=]]> #{month}	
		and
			MONTH(A.parking_exittime) <![CDATA[>=]]> #{month}	
		and
			DAY(A.parking_starttime) <![CDATA[<=]]> #{day}
		and
			DAY(A.parking_exittime) <![CDATA[>=]]> #{day}
	</select>
	
	<select id="FindStaricalParkingPeakTimeMonth" parameterType="com.spark_web.domain.ParkingStaticalData" resultType="Integer">
		select 
			SUM((YEAR(A.parking_exittime)-YEAR(A.parking_starttime))*365*24 +
			(MONTH(A.parking_exittime)-MONTH(A.parking_starttime))*31*24 +
			(DAY(A.parking_exittime)-DAY(A.parking_starttime))*24 +
			HOUR(A.parking_exittime)-HOUR(A.parking_starttime) +
			Ceil((MINUTE(A.parking_exittime)-MINUTE(A.parking_starttime))/60))	 	
		from
			t_resv as A
		join
			t_parkingslot as B
		on
			A.parkingslot_seq = B.parkingslot_seq
		where
			B.parkingfacility_id = #{parkingfacility_id}
		and
			YEAR(A.parking_starttime) <![CDATA[<=]]> #{year}
		and
			YEAR(A.parking_exittime) <![CDATA[>=]]> #{year}
		and
			MONTH(A.parking_starttime) <![CDATA[<=]]> #{month}	
		and
			MONTH(A.parking_exittime) <![CDATA[>=]]> #{month}	
	</select>
	
	<select id="FindStaricalParkingRevenueDay" parameterType="com.spark_web.domain.ParkingStaticalData" resultType="Integer">
		select 
			SUM(A.parking_price)	
		from
			t_resv as A
		join
			t_parkingslot as B
		on
			A.parkingslot_seq = B.parkingslot_seq
		where
			B.parkingfacility_id = #{parkingfacility_id}
		and
			DAY(A.parking_exittime) = #{day}	
		and
			MONTH(A.parking_exittime) = #{month}			
		and
			YEAR(A.parking_exittime) = #{year}		
	</select>
	
	<select id="FindStaricalParkingRevenueMonth" parameterType="com.spark_web.domain.ParkingStaticalData" resultType="Integer">
		select 
			SUM(A.parking_price)	
		from
			t_resv as A
		join
			t_parkingslot as B
		on
			A.parkingslot_seq = B.parkingslot_seq
		where
			B.parkingfacility_id = #{parkingfacility_id}
		and
			MONTH(A.parking_exittime) = #{month}	
		and
			YEAR(A.parking_exittime) = #{year}
	</select>

	<select id="FindStaricalParkingSlotDayUsage" parameterType="com.spark_web.domain.SlotUsage" resultType="Integer">
		select 
			count(*)	 	
		from
			t_resv
		where
			parkingslot_seq = #{parkingslot_seq}
		and
			YEAR(parking_starttime) <![CDATA[<=]]> YEAR(#{datetime})
		and
			YEAR(parking_exittime) <![CDATA[>=]]> YEAR(#{datetime})	
		and
			MONTH(parking_starttime) <![CDATA[<=]]> MONTH(#{datetime})
		and
			MONTH(parking_exittime) <![CDATA[>=]]> MONTH(#{datetime})
		and
			DAY(parking_starttime) <![CDATA[<=]]> DAY(#{datetime})
		and
			DAY(parking_exittime) <![CDATA[>=]]> DAY(#{datetime})
	</select>

	<select id="FindStaricalParkingSlotMonthUsage" parameterType="com.spark_web.domain.SlotUsage" resultType="Integer">
		select 
			count(*)	 	
		from
			t_resv
		where
			parkingslot_seq = #{parkingslot_seq}
		and
			YEAR(parking_starttime) <![CDATA[<=]]> YEAR(#{datetime})
		and
			YEAR(parking_exittime) <![CDATA[>=]]> YEAR(#{datetime})	
		and
			MONTH(parking_starttime) <![CDATA[<=]]> MONTH(#{datetime})
		and
			MONTH(parking_exittime) <![CDATA[>=]]> MONTH(#{datetime})
	</select>
	
	<select id="FindStaricalParkingOccupancyHour" parameterType="com.spark_web.domain.ParkingStaticalData" resultType="Double">
		select 
			SUM((YEAR(A.parking_exittime)-YEAR(A.parking_starttime))*365*24 +
			(MONTH(A.parking_exittime)-MONTH(A.parking_starttime))*31*24 +
			(DAY(A.parking_exittime)-DAY(A.parking_starttime))*24 +
			HOUR(A.parking_exittime)-HOUR(A.parking_starttime) +
			Ceil((MINUTE(A.parking_exittime)-MINUTE(A.parking_starttime))/60)) / count(*) 		 	
		from
			t_resv as A
		join
			t_parkingslot as B
		on
			A.parkingslot_seq = B.parkingslot_seq
		where
			B.parkingfacility_id = #{parkingfacility_id}
		and
			YEAR(A.parking_starttime) <![CDATA[<=]]> #{year}
		and
			YEAR(A.parking_exittime) <![CDATA[>=]]> #{year}
		and
			MONTH(A.parking_starttime) <![CDATA[<=]]> #{month}	
		and
			MONTH(A.parking_exittime) <![CDATA[>=]]> #{month}	
		and
			DAY(A.parking_starttime) <![CDATA[<=]]> #{day}
		and
			DAY(A.parking_exittime) <![CDATA[>=]]> #{day}
		and
			HOUR(A.parking_starttime) <![CDATA[<=]]> #{hour}
		and
			HOUR(A.parking_exittime) <![CDATA[>=]]> #{hour}
	</select>
	
	<select id="FindStaricalParkingOccupancyDay" parameterType="com.spark_web.domain.ParkingStaticalData" resultType="Double">
		select 
			SUM((YEAR(A.parking_exittime)-YEAR(A.parking_starttime))*365*24 +
			(MONTH(A.parking_exittime)-MONTH(A.parking_starttime))*31*24 +
			(DAY(A.parking_exittime)-DAY(A.parking_starttime))*24 +
			HOUR(A.parking_exittime)-HOUR(A.parking_starttime) +
			Ceil((MINUTE(A.parking_exittime)-MINUTE(A.parking_starttime))/60)) / count(*)	 	
		from
			t_resv as A
		join
			t_parkingslot as B
		on
			A.parkingslot_seq = B.parkingslot_seq
		where
			B.parkingfacility_id = #{parkingfacility_id}
		and
			YEAR(A.parking_starttime) <![CDATA[<=]]> #{year}
		and
			YEAR(A.parking_exittime) <![CDATA[>=]]> #{year}
		and
			MONTH(A.parking_starttime) <![CDATA[<=]]> #{month}	
		and
			MONTH(A.parking_exittime) <![CDATA[>=]]> #{month}	
		and
			DAY(A.parking_starttime) <![CDATA[<=]]> #{day}
		and
			DAY(A.parking_exittime) <![CDATA[>=]]> #{day}
	</select>
	
	<select id="FindStaricalParkingOccupancyMonth" parameterType="com.spark_web.domain.ParkingStaticalData" resultType="Double">
		select 
			SUM((YEAR(A.parking_exittime)-YEAR(A.parking_starttime))*365*24 +
			(MONTH(A.parking_exittime)-MONTH(A.parking_starttime))*31*24 +
			(DAY(A.parking_exittime)-DAY(A.parking_starttime))*24 +
			HOUR(A.parking_exittime)-HOUR(A.parking_starttime) +
			Ceil((MINUTE(A.parking_exittime)-MINUTE(A.parking_starttime))/60)) / count(*)	 	
		from
			t_resv as A
		join
			t_parkingslot as B
		on
			A.parkingslot_seq = B.parkingslot_seq
		where
			B.parkingfacility_id = #{parkingfacility_id}
		and
			YEAR(A.parking_starttime) <![CDATA[<=]]> #{year}
		and
			YEAR(A.parking_exittime) <![CDATA[>=]]> #{year}
		and
			MONTH(A.parking_starttime) <![CDATA[<=]]> #{month}	
		and
			MONTH(A.parking_exittime) <![CDATA[>=]]> #{month}	
	</select>
	
	
</mapper> 